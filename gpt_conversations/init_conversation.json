[{"role": "system", "content": "You are a helpful system, that will help me generate planning problems             in PDDL 1.2 language. You work on a service robot named Rico serving in a house.             You have a set of tasks that you can perform. You can hear what people ask you to do             and also you can talk to them too. You are a wheel robot with no manipulators (hands),             but you have a little platform on you that can be used to transport something.             There are people in the house and you are interacting with them."}, {"role": "assistant", "content": "Domain:\n```pddl\n(define (domain service-robot)\n    (:requirements :typing)\n    (:types person object)\n    \n    (:predicates\n        (ask ?p - person ?t - object)    ; p asks for t\n        (at ?o - object ?l - object)     ; o is at l\n        (on ?o - object ?p - object)     ; o is on p\n        (robot-at ?l - object)           ; robot is at l\n        (robot-empty)                    ; robot is empty\n        (robot-on ?o - object)           ; robot has o on its platform\n        (robot-talked)                   ; robot has talked to someone\n        (task-completed ?p - person ?t - object)     ; p's task t is completed\n    )\n    \n    (:action move\n        :parameters (?from - object ?to - object)\n        :precondition (and (at ?from ?to) (robot-at ?from))\n        :effect (and (not (robot-at ?from)) (robot-at ?to))\n    )\n    \n    (:action pick\n        :parameters (?obj - object ?from - object ?to - object)\n        :precondition (and (at ?from ?to) (robot-at ?from) (not (robot-on ?obj)) (robot-empty) (on ?obj ?from))\n        :effect (and (not (on ?obj ?from)) (not (robot-empty)) (robot-on ?obj))\n    )\n    \n    (:action place\n        :parameters (?obj - object ?from - object ?to - object)\n        :precondition (and (at ?from ?to) (robot-at ?from) (robot-on ?obj) (robot-empty) (not (on ?obj ?from)))\n        :effect (and (on ?obj ?to) (robot-empty) (not (robot-on ?obj)))\n    )\n    \n    (:action ask-for-task\n        :parameters (?person - person ?task - object)\n        :precondition (and (at ?person ?task) (not (task-completed ?person ?task)))\n        :effect (ask ?person ?task)\n    )\n    \n    (:action complete-task\n        :parameters (?person - person ?task - object)\n        :precondition (and (ask ?person ?task) (robot-on ?task))\n        :effect (and (not (ask ?person ?task)) (task-completed ?person ?task))\n    )\n    \n    (:action talk-to-person\n        :parameters (?person - person)\n        :precondition (and (at ?person ?person) (not (robot-talked)))\n        :effect (robot-talked)\n    )\n)\n```\n\nProblem:\n```pddl\n(define (problem service-robot-problem)\n    (:domain service-robot)\n    (:objects\n        person1 - person\n        person2 - person\n        object1 - object\n        object2 - object\n        object3 - object\n        object4 - object\n        platform - object\n        room1 - object\n        room2 - object\n    )\n    \n    (:init\n        (at person1 room1)\n        (at person2 room2)\n        (at object1 room1)\n        (on object1 room1)\n        (at object2 room1)\n        (on object2 room1)\n        (at object3 room2)\n        (on object3 room2)\n        (at object4 room2)\n        (on object4 room2)\n        (at platform room1)\n        (robot-at room1)\n        (robot-empty)\n    )\n    \n    (:goal (and (task-completed person1 object1) (task-completed person2 object4)))\n)\n```\n\nThis is a simple planning problem for a service robot in a house. The robot can perform actions like moving, picking up objects, placing objects, asking for tasks, completing tasks, and talking to people.\n\nIn the problem, there are two people (person1 and person2) and four objects (object1, object2, object3, and object4). The objects are initially located in two different rooms (room1 and room2). The robot is also initially located in room1 and has an empty platform.\n\nThe goal of the problem is to complete tasks for both person1 and person2. Person1 wants object1 to be moved from room1 to room2, while person2 wants object4 to be moved from room2 to room1.\n\nTo solve this problem, the robot needs to pick up object1, move to room2, place object1 in room2, pick up object4, move back to room1, and place object4 in room1."}, {"role": "user", "content": "Here is the planning domain in PDDL 1.2 language.             ;Header and description\n(define (domain system_domain)\n(:requirements :strips :typing :negative-preconditions)\n\n(:types\n    location - object\n    robot - object\n    possible_move - object\n    person - object\n    bomb - object\n    thing - object\n)\n\n(:predicates \n    (at-location ?o - object ?l - location)\n    (visited ?r-robot ?l - location)\n    (talked ?r - robot ?p - person ?l - location)\n    (shouted ?r - robot)\n    (jumped ?r - robot)\n    (taken_thing ?t - thing ?l - location)\n    (given_thing ?t - thing ?l - location)\n    (approached ?r - robot ?p - person)\n    (guided ?p - person ?l - location)\n)\n(:action move_between_locations\n    :parameters (\n        ?r - robot \n        ?start_loc - location \n        ?end_loc - location)\n    :precondition (\n        and\n        (at-location ?r ?start_loc)\n        (not(at-location ?r ?end_loc))\n    )\n\n    :effect (\n        and\n        (at-location ?r ?end_loc)\n        (not(at-location ?r ?start_loc))\n    )\n)\n\n(:action talk_to_person\n    :parameters (\n        ?r - robot \n        ?p - person \n        ?l - location)\n    :precondition (\n        and\n        (at-location ?r ?l)\n        (at-location ?p ?l)\n    )\n    :effect (\n        and(talked ?r ?p ?l)\n    )\n)\n\n(:action shout\n    :parameters (?r - robot)\n    :precondition ()\n    :effect (\n        and(shouted ?r)\n    )\n)\n\n(:action jump\n    :parameters (?r - robot)\n    :precondition ()\n    :effect (\n        and(jumped ?r)\n    )\n)\n\n(:action take_thing\n    :parameters (\n        ?r - robot \n        ?t - thing \n        ?l - location \n    )\n    :precondition (\n        and\n        (at-location ?r ?l)\n        (at-location ?t ?l)\n    )\n    :effect (\n        and(taken_thing ?t ?l)\n    )\n)\n\n(:action give_thing\n    :parameters (\n        ?r - robot \n        ?t - thing \n        ?l - location)\n    :precondition (\n        and\n        (at-location ?r ?l)\n        (taken_thing ?t ?l)\n        (not(given_thing ?t ?l))\n    )\n    :effect (\n        and\n        (not(taken_thing ?t ?l))\n        (given_thing ?t ?l)\n    )\n)\n\n(:action approach_human\n    :parameters (\n        ?r - robot \n        ?p - person \n        ?l - location)\n    :precondition (\n        and\n        (at-location ?r ?l)\n        (at-location ?p ?l)\n        (not(approached ?r ?p))\n    )\n    :effect (\n        and\n        (approached ?r ?p)\n    )\n)\n\n(:action assist_human_with_transport\n    :parameters (\n        ?r - robot \n        ?p - person\n        ?start_loc - location\n        ?end_loc - location)\n    :precondition (\n        and\n        (at-location ?r ?start_loc)\n        (at-location ?p ?start_loc)\n        (not(at-location ?r ?end_loc))\n        (not(at-location ?p ?end_loc))\n        (approached ?r ?p)\n        (not(guided ?p ?end_loc))\n    )\n    :effect (\n        and\n        (at-location ?r ?end_loc)\n        (at-location ?p ?end_loc)\n        (not(at-location ?r ?start_loc))\n        (not(at-location ?p ?start_loc))\n        (not(approached ?r ?p))\n        (guided ?p ?end_loc)\n    )\n)\n)\n"}, {"role": "assistant", "content": "Thank you for providing the planning domain in PDDL 1.2 language. \n\nCould you please provide me with the initial state and goal description for the planning problem?"}, {"role": "user", "content": "Based on the domain file, the actions that the             system can perform are: move_between_locations, talk_to_person, shout, jump, take_thing, give_thing, approach_human, assist_human_with_transport"}, {"role": "assistant", "content": "Thank you for providing the actions that the system can perform. \n\nTo generate a planning problem, I will need the initial state and the goal description. Could you please provide me with the initial state and the goal description for the planning problem?"}, {"role": "user", "content": "In the following messages I will give you the             definitions of example PDDL problem files for the PDDL domain file             I gave you in the previous message."}, {"role": "user", "content": "(define (problem clean_problem)\n(:domain system_domain)\n(:objects\n    kitchen bathroom livingroom startpoint - location\n    rico - robot\n)\n(:init\n    (at-location rico startpoint)\n    (not(at-location rico bathroom))\n    (not(at-location rico kitchen))\n    (not(at-location rico livingroom))\n)\n(:goal \n    (and\n    (visited rico kitchen)\n    (visited rico bathroom)\n    (visited rico livingroom)\n)\n)\n)"}, {"role": "user", "content": "(define (problem rescue_human_in_kitchen_problem)\n(:domain system_domain)\n(:objects\n    kitchen bathroom livingroom startpoint - location\n    rico - robot\n    macias - person\n)\n(:init\n    (at-location rico startpoint)\n    (at-location macias kitchen)\n)\n(:goal  \n    (and\n    (approached rico macias)\n    (talked rico macias kitchen)\n)\n)\n)"}, {"role": "user", "content": "(define (problem bring_beverage)\n(:domain system_domain)\n(:objects\n    kitchen bathroom livingroom startpoint - location\n    rico - robot\n    beverage - thing\n)\n(:init\n    (at-location rico bathroom)\n    (at-location beverage kitchen)\n)\n(:goal \n    (and\n    (given_thing beverage livingroom)\n)\n)\n)"}, {"role": "user", "content": "(define (problem move_to_kitchen_problem)\n(:domain system_domain)\n(:objects\n    kitchen bathroom livingroom startpoint - location\n    rico - robot\n)\n(:init\n    (at-location rico startpoint)\n    (not(at-location rico bathroom))\n    (not(at-location rico kitchen))\n    (not(at-location rico livingroom))\n)\n(:goal (and\n    (at-location rico kitchen)\n)\n)\n)"}, {"role": "user", "content": "(define (problem guide_human_from_kitchen_to_bathroom)\n(:domain system_domain)\n(:objects\n    kitchen bathroom livingroom startpoint - location\n    rico - robot\n    macias - person\n)\n(:init\n    (at-location rico startpoint)\n    (at-location macias kitchen)\n)\n(:goal (and\n    (guided macias bathroom)\n)\n)\n)"}, {"role": "user", "content": "You are requested to make a coffeeGive a list             of actions that you should do to perform this task. Use only the actions that you can perform."}, {"role": "user", "content": "In the previous messages I gave you the definition             of correctly defined PDDL domain file. Generate a PDDL problem for the ,             requested task (make a coffee), based on the domain file that I gave you,             and the set of actions that the system can perform. The plan should only consist             of those actions. Remember to use the correct syntax for PDDL             language. Call the problem as system_problem. In the output, give me             the problem file only, without any comments."}]